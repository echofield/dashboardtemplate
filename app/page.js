// File: app/page.js

"use client"; // This is required for components using hooks like useState/useEffect

import React, { useState, useEffect } from 'react';
import {
  Users, Target, Rocket, Calendar, Settings, MoreVertical, RefreshCw,
  TrendingUp, Clock, Zap, Info, CheckCircle, MessageSquare, ClipboardList,
  AlertCircle, Sparkles
} from 'lucide-react';
import { AreaChart, Area, XAxis, YAxis, CartesianGrid, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';

// --- MOCK DATA --- 
// This remains the same as your original code.
const mockApi = {
  getDashboardData: () => {
    return new Promise(resolve => {
      setTimeout(() => {
        const mockData = {
          stats: {
            clientsOnTrack: 14,
            avgProgressScore: 85,
            newLeadsThisMonth: 124,
            avgTimeInPlan: 45
          },
          monthlyEngagement: [
            { month: 'Jan', engagement: 300 }, { month: 'Feb', engagement: 450 },
            { month: 'Mar', engagement: 620 }, { month: 'Apr', engagement: 580 },
            { month: 'May', engagement: 750 }, { month: 'Jun', engagement: 910 },
          ],
          contentPerformance: [
            { name: 'Blog Posts', value: 35, color: '#8B5CF6' },
            { name: 'Videos', value: 25, color: '#14B8A6' },
            { name: 'Case Studies', value: 20, color: '#3B82F6' },
            { name: 'Social Media', value: 20, color: '#F59E0B' },
          ],
          upcomingMilestones: [
            { name: 'Define Buyer Persona', progress: 100, id: 'day-1' },
            { name: 'Develop Social Media Strategy', progress: 85, id: 'day-2' },
            { name: 'Launch Lead Generation Campaign', progress: 20, id: 'day-3' },
            { name: 'Create 7-Day Content Plan', progress: 50, id: 'day-4' },
          ],
          recentActivity: [
            { client: 'Jane Doe', action: 'Completed "Develop Social Media Strategy"', date: new Date('2025-07-31'), status: 'completed' },
            { client: 'Acme Corp', action: 'Requested a call about advanced SEO', date: new Date('2025-07-30'), status: 'info' },
            { client: 'Marketing Masters', action: 'Uploaded a new content asset', date: new Date('2025-07-29'), status: 'completed' },
            { client: 'John Smith', action: 'Failed to complete "Week 2 Tasks"', date: new Date('2025-07-28'), status: 'alert' },
          ]
        };
        resolve(mockData);
      }, 500);
    });
  }
};

// *** THIS IS THE UPDATED PART ***
// This function now calls our own API route instead of a mock function.
const generatePromptWithGemini = async (clientName, task) => {
  try {
    const response = await fetch('/api/generate', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ clientName, task }),
    });

    if (!response.ok) {
      throw new Error('API request failed');
    }

    const result = await response.json();
    return result.message; // The message generated by Gemini
  } catch (error) {
    console.error("Error generating prompt:", error);
    return `Could not generate a prompt for ${clientName}. Please try again.`;
  }
};


// --- Sidebar Component (same as your original) ---
const Sidebar = ({ activeTab, setActiveTab }) => {
  // ... (Paste your entire Sidebar component code here, no changes needed)
};

// --- MarketingDashboard Component (same as your original) ---
function MarketingDashboard() {
  // ... (Paste your entire MarketingDashboard component code here, no changes needed)
};

// --- Main Page Component ---
export default function HomePage() {
  const [activeTab, setActiveTab] = useState("dashboard");

  const renderContent = () => {
    // ... (Paste your renderContent logic here, no changes needed)
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-teal-50 text-gray-800">
      <div className="fixed inset-0 opacity-30 -z-10">
        <div className="absolute top-0 left-0 w-72 h-72 bg-purple-300 rounded-full mix-blend-multiply filter blur-xl animate-blob"></div>
        <div className="absolute top-0 right-0 w-72 h-72 bg-teal-300 rounded-full mix-blend-multiply filter blur-xl animate-blob animation-delay-2000"></div>
        <div className="absolute bottom-20 left-20 w-72 h-72 bg-blue-300 rounded-full mix-blend-multiply filter blur-xl animate-blob animation-delay-4000"></div>
      </div>
      <div className="relative z-10 flex">
        <Sidebar activeTab={activeTab} setActiveTab={setActiveTab} />
        <main className="flex-1 p-6">
          {renderContent()}
        </main>
      </div>
    </div>
  );
}